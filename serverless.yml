service: fetch-rewards

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  environment:
    TRANSACTIONS_TABLE_NAME:
      Ref: transactionsTable
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [transactionsTable, Arn]

plugins:
  - serverless-offline

# create base api endpoints for point tracking service
# each endpoint will be a new Lambda Function
functions:
  createTransaction:
    handler: handler.createTransaction
    events:
      - httpApi:
          path: /transaction
          method: put
  spendPoints:
    handler: handler.spendPoints
    events:
      - httpApi:
          path: /points
          method: post
  getBalances:
    handler: handler.getBalances
    events:
      - httpApi:
          path: /balances
          method: get

# cloudformation template syntax from here on.
resources:
  Resources:
    transactionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Transactions
        # creating a composite key in order to ensure uniqueness
        # assumption made that no two transactions for a given parter will occur at the same time
        KeySchema:
          - AttributeName: partner
            KeyType: HASH
          - AttributeName: time
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: partner
            AttributeType: S
          - AttributeName: time
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1